import java.awt.image.BufferedImage;

import java.io.File;

import java.io.IOException;

import java.util.Random;

import javax.imageio.ImageIO;

import swiftbot.Button;

import swiftbot.ImageSize;

import swiftbot.SwiftBotAPI;



public class ButtonAInitiation {

  private static SwiftBotAPI swiftbot;



  public static void main(String[] args) {

      swiftbot = new SwiftBotAPI();



      System.out.println("Welcome to the search for light program");

      System.out.println("Press Button A to start the program");

      System.out.println("Press Button X to terminate the program");



      swiftbot.enableButton(Button.A, () -> {

          System.out.println("Button A has been pressed. Preparing Swiftbot to capture image");

          swiftbot.fillUnderlights(new int[]{150, 0, 255}); // bright purple



          try {

              Thread.sleep(2000); // Initial delay for setup

              takeImageAndMove();

              while (true) {

                  if (checkForObject(swiftbot)) {

                      swiftbot.fillUnderlights(new int[]{255, 0, 0});

                      System.out.println("Object detected in front!, Please Move");

                      Thread.sleep(10000); // Wait for 10 seconds
                      

                      if (checkForObject(swiftbot)) {

                          System.out.println("Operation terminated due to persistent obstacle.");
 
                          return; // Terminate the program

                      }

                  } else {

                      swiftbot.move(100, 100, 500); // Move forward for 0.5 seconds

                      takeImageAndMove(); // Stop, take image, decide next move

                      if (!lightFoundWithin(5)) {

                          stop();

                          Thread.sleep(500); // Stop for half a second

                          String randomDirection = randomlySelectDirection(); // Change direction randomly

                          if ("left".equals(randomDirection)) {

                              swiftbot.move(100, 50, 500);

                          } else {

                              swiftbot.move(50, 100, 500);

                          }

                      }

                  }

              }

          } catch (InterruptedException | IOException e) {

              System.out.println("An error occurred during image capture or save.");

              e.printStackTrace();

          } finally {

              swiftbot.disableUnderlights();

          }

      });



      swiftbot.enableButton(Button.X, () -> {

          System.out.println("Button X has been pressed. Program is terminating.");

          swiftbot.disableButton(Button.A);

          swiftbot.disableButton(Button.X);

          System.exit(0); // Exit the program

      });

  }



  private static String randomlySelectDirection() {

// TODO Auto-generated method stub

return null;

}



private static void stop() {

      // Implement stop logic here

  }



  private static boolean lightFoundWithin(int seconds) {

      // Implement light detection logic within specified time here

      return false;

  }



  private static void takeImageAndMove() throws IOException {

      BufferedImage img = swiftbot.takeGrayscaleStill(ImageSize.SQUARE_480x480);

      File outputfile = new File("savedimage.jpg");

      ImageIO.write(img, "jpg", outputfile);

      System.out.println("The image was taken and saved successfully.");

      analyzeAndPrintLightIntensities(img);

  }



  private static boolean checkForObject(SwiftBotAPI swiftBot) {

      double distance = swiftBot.useUltrasound();

      return distance <= 50;

  }



  private static void analyzeAndPrintLightIntensities(BufferedImage img) {

      int width = img.getWidth();

      int height = img.getHeight();

      int sectionWidth = width / 3;



      double leftIntensity = calculateAverageLightIntensity(img, 0, 0, sectionWidth, height);

      double centerIntensity = calculateAverageLightIntensity(img, sectionWidth, 0, sectionWidth, height);

      double rightIntensity = calculateAverageLightIntensity(img, 2 * sectionWidth, 0, sectionWidth, height);

      System.out.println("The average light intensity of the left section is: " + leftIntensity);

      System.out.println("The average light intensity of the center section is: " + centerIntensity);

      System.out.println("The average light intensity of the right section is: " + rightIntensity);



      // Assume lightColor is defined somewhere, for demonstration we define it here

      int[] lightColor = {255, 255, 255}; // Example white color

      moveTowardsHighestIntensity(leftIntensity, centerIntensity, rightIntensity, lightColor);

  }



  private static double calculateAverageLightIntensity(BufferedImage img, int x, int y, int width, int height) {

      long sum = 0;

      int count = 0;



      for (int i = x; i < x + width; i++) {

          for (int j = y; j < y + height; j++) {

              int pixel = img.getRGB(i, j);

              int red = (pixel >> 16) & 0xFF;

              int green = (pixel >> 8) & 0xFF;

              int blue = pixel & 0xFF;

              int grayscale = (int) (0.299 * red + 0.587 * green + 0.114 * blue);

              sum += grayscale;

              count++;

          }

      }



      return (double) sum / count;

  }



  private static void moveTowardsHighestIntensity(double leftIntensity, double centerIntensity, double rightIntensity, int[] lightColor) {

      swiftbot.fillUnderlights(lightColor);



      if (leftIntensity > centerIntensity && leftIntensity > rightIntensity) {

          System.out.println("Swiftbot Moving left...");

          swiftbot.move(50, 100, 500);

      } else if (rightIntensity > centerIntensity) {

          System.out.println("Swiftbot Moving right...");

          swiftbot.move(100, 50, 500);

      } else {

          System.out.println("Swiftbot Moving forward...");

          swiftbot.move(100, 100, 500);

      }



      try {

          Thread.sleep(500); // Wait for the movement to complete

      } catch (InterruptedException e) {

          e.printStackTrace();

      }



      swiftbot.disableUnderlights();

  }

}

